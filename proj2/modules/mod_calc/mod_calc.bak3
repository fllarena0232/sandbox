#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/syscalls.h>
#include <linux/kallsyms.h>
#include <linux/uaccess.h>
#include <linux/init.h>

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("LKM to modify calc system call to always perform modulo on Raspberry Pi");

// Pointer to the system call table
unsigned long *sys_call_table;

// Pointer to the original calc system call.
asmlinkage long (*original_calc)(int, int, char, int __user*);

// Replacement function that only performs modulo operation
static asmlinkage int mod_calc(int param1, int param2, char operation, int *result) {
    int temp_result;

    if (param2 == 0) {
        return -1; // Prevent division by zero in modulo operation
    }

    temp_result = param1 % param2;

    if (copy_to_user(result, &temp_result, sizeof(int))) {
        return -1; // Fail if unable to copy result to user space
    }

    return 0; // Success
}
























unsigned long **find_syscall_table (void){
	unsigned long **sct=(unsigned long **)0x80108224; //<--check dir
	return sct;
}


// find addredss of syscall table
static int __init find_sys_call_table_init(void) {
    // Lookup the address of sys_call_table
    sys_call_table = (unsigned long*)kallsyms_lookup_name("sys_call_table");

    if (!sys_call_table) {
        pr_alert("Could not find sys_call_table address.\n");
        return -EFAULT;
    }
    pr_info("sys_call_table address: %px\n", sys_call_table);
    return 0;
}






/*








unsigned long **sys_call_table;

// Function to find the system call table
unsigned long **find_sys_call_table(void) {
    // The method to locate the sys_call_table can vary by kernel version
    unsigned long **sct = (unsigned long **)0x80108224; // Hypothetical address
    return sct;
}

// Make the system call table writable
void make_rw(unsigned long address) {
    unsigned int level;
    pte_t *pte = lookup_address(address, &level);
    if (pte->pte &~ _PAGE_RW) {
        pte->pte |= _PAGE_RW;
    }
}

// Make the system call table read-only
void make_ro(unsigned long address) {
    unsigned int level;
    pte_t *pte = lookup_address(address, &level);
    pte->pte = pte->pte &~ _PAGE_RW;
}

// Load module
static int __init lkm_init(void) {
    sys_call_table = find_sys_call_table();
    if (!sys_call_table) {
        printk(KERN_ALERT "Couldn't locate sys_call_table.\n");
        return -1;
    }	


i*/
// Module initialization
static int __init lkm_init(void) {
    // Find the system call table
    sys_call_table = (unsigned long *)kallsyms_lookup_name("sys_call_table");

    if (!sys_call_table) {
        printk(KERN_ERR "Couldn't find the system call table\n");
        return -1;
    }

    // Save the original calc system call.
    original_calc = (void *)sys_call_table[__NR_sys_calc];

    // Disable write protection and replace calc system call with new_calc.
//    disable_write_protection();
    sys_call_table[__NR_sys_calc] = (unsigned long)mod_calc;
//    enable_write_protection();

    printk(KERN_INFO "Loaded LKM: calc system call is now replaced with modulo operation\n");
    return 0;
}


// Unload module
static void __exit lkm_exit(void) {
    // Restore original calc system call
    if (sys_call_table) {
    printk(KERN_INFO "nsyscall if\n");
        sys_call_table[__NR_sys_calc] = (unsigned long *)original_calc;
    printk(KERN_INFO "after syscalltable.\n");
    }

    // Make sys_call_table read-only
    //make_ro((unsigned long) sys_call_table);

    printk(KERN_INFO "Module unloaded: calc system call restored.\n");
}

module_init(lkm_init);
module_exit(lkm_exit);
