#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/kallsyms.h>
#include <linux/syscalls.h>

// Declare a pointer to hold the original sys_calc function
static asmlinkage int (*original_sys_calc)(int, int, char, int*);

// Replacement function that only performs modulo operation
static asmlinkage int mod_sys_calc(int param1, int param2, char operation, int *result) {
    int temp_result;

    if (param2 == 0) {
        return -1; // Prevent division by zero in modulo operation
    }

    temp_result = param1 % param2;

    if (copy_to_user(result, &temp_result, sizeof(int))) {
        return -1; // Fail if unable to copy result to user space
    }

    return 0; // Success
}

static int __init mod_calc_init(void) {
    // Locate the original sys_calc function using kallsyms
    printk(KERN_INFO "init module");
    original_sys_calc = (void *)kallsyms_lookup_name("sys_sys_calc"); //sys_calc");
    printk(KERN_INFO "origunal %d", original_sys_calc);

    if (!original_sys_calc) {
        pr_err("Failed to locate sys_calc\n");
        return -EINVAL;
    }

    // Override sys_calc function with mod_calc
    *((unsigned long *)kallsyms_lookup_name("sys_call_table") + 397) = (unsigned long)mod_sys_calc;
 //   pr_info("mod_calc loaded, sys_calc now uses modulo operation\n");

    return 0;
}

static void __exit mod_calc_exit(void) {
    // Restore the original sys_calc function when module is removed
    *((unsigned long *)kallsyms_lookup_name("sys_call_table") + 397) = (unsigned long)original_sys_calc;
    pr_info("mod_calc unloaded, sys_calc restored to original\n");
}

module_init(mod_calc_init);
module_exit(mod_calc_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("Kernel module to modify sys_calc behavior");

